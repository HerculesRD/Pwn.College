.intel_syntax noprefix
.global _start

.section .data
response:
        .ascii "HTTP/1.0 200 OK\r\n\r\n"
buffer:
        .zero 1024

.section .text

_start:
mov rdi,2 
mov rsi,1
mov rdx,0 
mov rax,41 
syscall #socket
#struct se almacena las variables en reversa
mov DWORD PTR [rsp-0x4],0x0 #0.0.0.0 bind addr
mov word PTR [rsp-0x6],0x5000 #puerto 80 es 50 en hexa y luego little endian
mov word PTR [rsp-0x8],0x2 #AF_INET
sub rsp,0x8 #el stack lo mando hasta la primera variable
mov rdi,3
mov rsi,rsp
mov rdx,16
mov rax,49
syscall #bind
mov rdi,3
mov rsi,0
mov rax,50
syscall #listen
_volver:
mov rdi,3
mov rsi,0
mov rdx,0
mov rax,43
syscall #accept
mov rdi,4
mov rdx,1024
lea rsi,buffer
mov rax,0
syscall #read
lea rdi,[rsi+4] #rdi tiene la direcc del buffer
mov byte PTR [rdi+16],0 #cortar end data
mov rsi,0 #O_RDONLY
mov rax,2
syscall #open
mov rdi,5
lea rsi,buffer
mov rdx,256
mov rax,0
syscall #read fd5
push rax #este return es el write_file_count
mov rdi,5
mov rax,3
syscall #close fd5
mov rdi,4
lea rsi,response
mov rdx,19
mov rax,1
syscall #write del 200 OK
mov rdi,4
lea rsi,buffer
pop rax #popeo el write_file_count
mov rdx,rax
mov rax,1
syscall #write para el file
mov rdi,4
mov rax,3
syscall #close del fd4
jmp _volver
mov rdi,0 #return del exit
mov rax,60
syscall #exit function